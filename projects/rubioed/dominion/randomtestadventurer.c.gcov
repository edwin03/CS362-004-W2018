        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Edwin Rubio
        -:    2:// 02/14/2018
        -:    3:// CS362 - OSU
        -:    4:// File Name: randomtestadventurer.c
        -:    5:// Instructions: Write an automed random test generator for three Dominion cards "use the refactored code
        -:    6:// you created for assignement-2", one of them being the adventurer card, and at least one being a card 
        -:    7:// you wrote unit tests for in assignemnt-3. Check these testers in as randomtestcard1.c, 
        -:    8:// randomtestcard2.c, and randomtestadventurer.c.
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>// rand(), srand()
        -:   14:#include <time.h>// time()
        -:   15:#include <string.h>
        -:   16:#include <assert.h>
        -:   17:#include <math.h>
        -:   18:#include "rngs.h"// Random()
        -:   19:
        -:   20:#define TESTCARD "adventurer"
        -:   21:
function main called 1 returned 100% blocks executed 87%
        1:   22:int main() {
        -:   23:	// variables to hold previous and post state of the game.
        -:   24:	struct gameState G, testG;
        -:   25:	// as seen in the playdom.c file in line 88
        1:   26:    int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        -:   27:    //requires to add 2 treasure cards to the hand deck
        1:   28:    int newCards = 2;
        -:   29:    int i, x, y, m, a;
        -:   30:    int test;
        1:   31:	int tCount = 0;// Treasure count
        1:   32:	int tCount2 = 0;// Treasure count
        1:   33:	int dCardFunctionFailed = 0, handCountFailed = 0, cEFunctionFailed = 0, deckCountFails = 0;
        1:   34:	int treasureCountFailed = 0;
        -:   35:
        -:   36:	//int discarded = 1;
        -:   37:    //int xtraCoins = 0;
        -:   38:    //int shuffledCards = 0;
        -:   39:	//int thisPlayer = 0;
        -:   40:	//int remove1, remove2;
        -:   41:
        -:   42:	// Seeding the srand function with the current time
        1:   43:	srand(time(0));
call    0 returned 1
call    1 returned 1
        -:   44:
        1:   45:	printf("----------------- Starting Random Test! ----------------\n");
call    0 returned 1
        1:   46:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 1
        -:   47:
      251:   48:	for (i = 0; i < 250; i++)
branch  0 taken 250
branch  1 taken 1 (fallthrough)
        -:   49:	{
        -:   50:		// Set a random game state on G
  6575250:   51:		for (x = 0; x < sizeof(struct gameState); x++)
branch  0 taken 6575000
branch  1 taken 250 (fallthrough)
        -:   52:		{
  6575000:   53:			((char*)&G)[x] = rand() * 256;
call    0 returned 6575000
        -:   54:		}
        -:   55:
        -:   56:		// Set the number of players where the max is 4 and the min is 2
      250:   57:		G.numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 250
        -:   58:		// Select the current player
      250:   59:		G.whoseTurn = rand() % G.numPlayers;
call    0 returned 250
        -:   60:		// Assign the count deck for the player that is currently playing
      250:   61:		G.deckCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   62:		// Assign the  hand count for the player that is currently playing
      250:   63:		G.handCount[G.whoseTurn] = rand() % (MAX_HAND - 3 + 1) + 3;
call    0 returned 250
        -:   64:		// Set randomly the number of discarded cards
      250:   65:		G.discardCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   66:		// Now lets choose a card from the hand deck
      250:   67:		handPos = rand() % G.handCount[G.whoseTurn];
call    0 returned 250
        -:   68:		// Now lets add some treasure cards to the hand deck of the current player.
    63440:   69:		for (x = 0; x < G.handCount[G.whoseTurn]; x++)
branch  0 taken 63190
branch  1 taken 250 (fallthrough)
        -:   70:		{
    63190:   71:			y = rand() % 2;
call    0 returned 63190
    63190:   72:			if (y == 1)
branch  0 taken 31552 (fallthrough)
branch  1 taken 31638
    31552:   73:				G.hand[G.whoseTurn][x] = copper;
        -:   74:			else
    31638:   75:				G.hand[G.whoseTurn][x] = estate;
        -:   76:		}
        -:   77:
    63201:   78:		for (x = 0; x < G.deckCount[G.whoseTurn]; x++)
branch  0 taken 62951
branch  1 taken 250 (fallthrough)
        -:   79:		{
    62951:   80:			y = rand() % 2;
call    0 returned 62951
    62951:   81:			if (y == 1)
branch  0 taken 31547 (fallthrough)
branch  1 taken 31404
    31547:   82:				G.deck[G.whoseTurn][x] = copper;
        -:   83:			else
    31404:   84:				G.deck[G.whoseTurn][x] = estate;
        -:   85:		}
        -:   86:
        -:   87:		// copy the game state to a test case before calling the cardEffect
      250:   88:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   89:
        -:   90:		// Test to see if the adventurerCard was called
      250:   91:        test = cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 250
      250:   92:        if (test != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 250
    #####:   93:            printf("cardEffect function failed");
call    0 never executed
    #####:   94:            cEFunctionFailed++;
        -:   95:        };
        -:   96:
        -:   97:        // Check the hand count
      250:   98:        if ((testG.handCount[G.whoseTurn]) != G.handCount[G.whoseTurn] + newCards)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:   99:        {
    #####:  100:        	printf("Failed: Hand Count: %d, Expected: %d \n\n", testG.handCount[G.whoseTurn], G.handCount[G.whoseTurn]+newCards);
call    0 never executed
    #####:  101:        	dCardFunctionFailed++;
    #####:  102:        	handCountFailed++;
        -:  103:        }
        -:  104:
        -:  105:        // Check the deck and discard count
      250:  106:        if ((G.deckCount[G.whoseTurn] + G.discardCount[G.whoseTurn]) - newCards != (testG.deckCount[G.whoseTurn] + testG.discardCount[G.whoseTurn]))
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  107:        {
    #####:  108:        	printf("Total Cards: %d, Expected: %d \n\n", (testG.deckCount[G.whoseTurn] + testG.discardCount[G.whoseTurn]), (G.deckCount[G.whoseTurn] + G.discardCount[G.whoseTurn]) - newCards);
call    0 never executed
    #####:  109:        	deckCountFails++;
        -:  110:        }
        -:  111:
        -:  112:      	//---------- Now lets test the treasure counts ----------//
        -:  113:        // Lets look at the orginal game state first
        -:  114:        
        -:  115:        // Get the number of cards that the current player holds
      250:  116:        m = numHandCards(&G);
call    0 returned 250
      250:  117:        a = 0;
        -:  118:
    63690:  119:        while (a < m)
branch  0 taken 63190
branch  1 taken 250 (fallthrough)
        -:  120:        {
    63190:  121:        	if (handCard(a, &G) == copper)
call    0 returned 63190
branch  1 taken 31552 (fallthrough)
branch  2 taken 31638
        -:  122:        	{
    31552:  123:        		tCount = tCount + 1;
        -:  124:        	}
    31638:  125:        	else if (handCard(a, &G) == silver)
call    0 returned 31638
branch  1 taken 0 (fallthrough)
branch  2 taken 31638
        -:  126:        	{
    #####:  127:        		tCount = tCount + 2;
        -:  128:        	}
    31638:  129:        	else if (handCard(a, &G) == gold)
call    0 returned 31638
branch  1 taken 0 (fallthrough)
branch  2 taken 31638
        -:  130:        	{
    #####:  131:        		tCount = tCount + 3;
        -:  132:        	}
    63190:  133:        	a++;
        -:  134:        }
        -:  135:
      250:  136:        m = numHandCards(&testG);
call    0 returned 250
      250:  137:        a = 0;
        -:  138:
    64190:  139:        while (a < m)
branch  0 taken 63690
branch  1 taken 250 (fallthrough)
        -:  140:        {
    63690:  141:        	if (handCard(a, &testG) == copper)
call    0 returned 63690
branch  1 taken 32052 (fallthrough)
branch  2 taken 31638
        -:  142:        	{
    32052:  143:        		tCount2 = tCount2 + 1;
        -:  144:        	}
    31638:  145:        	else if (handCard(a, &testG) == silver)
call    0 returned 31638
branch  1 taken 0 (fallthrough)
branch  2 taken 31638
        -:  146:        	{
    #####:  147:        		tCount2 = tCount2 + 2;
        -:  148:        	}
    31638:  149:        	else if (handCard(a, &testG) == gold)
call    0 returned 31638
branch  1 taken 0 (fallthrough)
branch  2 taken 31638
        -:  150:        	{
    #####:  151:        		tCount2 = tCount2 + 3;
        -:  152:        	}
    63690:  153:        	a++;
        -:  154:        }
        -:  155:
      250:  156:        if (tCount != tCount2 + 2)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
        -:  157:        {
      250:  158:        	printf("Teeasure Count: %d, Expected Treasure Count: >= %d \n\n", tCount2, tCount + 2);	
call    0 returned 250
      250:  159:        	treasureCountFailed++;
        -:  160:        }
        -:  161: 
        -:  162:	}
        -:  163:
        1:  164:	if (cEFunctionFailed == 0 && dCardFunctionFailed == 0 && handCountFailed == 0 && deckCountFails == 0 && treasureCountFailed == 0) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        -:  165:	{
    #####:  166:        printf("----NO ERRORS FOUND----\n");
call    0 never executed
        -:  167:    } 
        -:  168:    else
        -:  169:    {
        1:  170:        printf("----Failed----\n");
call    0 returned 1
        1:  171:        printf("cardEffect () function fails: %d\n", cEFunctionFailed);
call    0 returned 1
        1:  172:        printf("drawCard () function fails: %d\n", dCardFunctionFailed);
call    0 returned 1
        1:  173:        printf("Hand count fails: %d\n", handCountFailed);
call    0 returned 1
        1:  174:        printf("Deck count fails: %d\n", deckCountFails);
call    0 returned 1
        1:  175:		printf("Treasure Count fails: %d\n", treasureCountFailed);
call    0 returned 1
        -:  176:    }
        -:  177:
        1:  178:    return 0;
        -:  179:}
