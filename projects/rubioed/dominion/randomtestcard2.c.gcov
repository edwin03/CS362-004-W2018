        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Edwin Rubio
        -:    2:// 02/16/2018
        -:    3:// CS362 - OSU
        -:    4:// File Name: randomtestcard2.c
        -:    5:// Instructions: Write an automed random test generator for three Dominion cards "use the refactored code
        -:    6:// you created for assignement-2", one of them being the adventurer card, and at least one being a card 
        -:    7:// you wrote unit tests for in assignemnt-3. Check these testers in as randomtestcard1.c, 
        -:    8:// randomtestcard2.c, and randomtestadventurer.c.
        -:    9:// council room card info: +4 cards, +1 buy.  Each other player draws a card. 
        -:   10:/*
        -:   11:council_roomCard() function:
        -:   12:void council_roomCard (int currentPlayer, struct gameState *state, int handPos)
        -:   13:{
        -:   14:  int i;//I added this here...
        -:   15:  //+4 Cards
        -:   16:  for (i = 0; i < 4; i++)
        -:   17:  {
        -:   18:    drawCard(currentPlayer, state);
        -:   19:  }
        -:   20:              
        -:   21:  //+1 Buy
        -:   22:  state->numBuys++;
        -:   23:              
        -:   24:  //Each other player draws a card
        -:   25:  for (i = 0; i < state->numPlayers; i++)
        -:   26:  {
        -:   27:    if ( i != currentPlayer )
        -:   28:    {
        -:   29:      drawCard(i, state);
        -:   30:    }
        -:   31:    i++;//I introduced this bug here, this will skip half of the players. First player will draw a card, then second wont, then 3rd will draw, etc.
        -:   32:  }
        -:   33:              
        -:   34:  //put played card in played card pile
        -:   35:  discardCard(handPos, currentPlayer, state, 0);
        -:   36:
        -:   37:}
        -:   38:*/
        -:   39:#include "dominion.h"
        -:   40:#include "dominion_helpers.h"
        -:   41:#include <stdio.h>
        -:   42:#include <stdlib.h>// rand(), srand()
        -:   43:#include <time.h>// time()
        -:   44:#include <string.h>
        -:   45:#include <assert.h>
        -:   46:#include <math.h>
        -:   47:#include "rngs.h"// Random()
        -:   48:
        -:   49:#define TESTCARD "council_room"
        -:   50:
function main called 1 returned 100% blocks executed 84%
        1:   51:int main() 
        -:   52:{
        -:   53:	// as seen in the playdom.c file in line 88
        1:   54:    int handpos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   55:	int discardCardFails = 0;
        -:   56:	int test;
        -:   57:	int i, x, n;
        1:   58:	int cEFunctionFailed = 0;// cardEffect function fails
        1:   59:	int handCountFailed = 0;
        1:   60:	int totalCards = 0, copytotalCards = 0, deckTotalFailed = 0, buyFails = 0;
        1:   61:	int playersHandNotMatch = 0;
        -:   62:	int playerHand[4];
        -:   63:    int copyPlayerHand[4];
        -:   64:
        -:   65:	// variables to hold previous and post state of the game.
        -:   66:	struct gameState G, testG;
        -:   67:	
        -:   68:	//seed rand()
        1:   69:	srand(time(0));
call    0 returned 1
call    1 returned 1
        -:   70:
        1:   71:	printf("----------------- Starting Random Test! ----------------\n");
call    0 returned 1
        1:   72:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 1
        -:   73:
      251:   74:	for (i = 0; i < 250; i++)
branch  0 taken 250
branch  1 taken 1 (fallthrough)
        -:   75:	{
        -:   76:		// Set a random game state on G
  6575250:   77:		for (x = 0; x < sizeof(struct gameState); x++)
branch  0 taken 6575000
branch  1 taken 250 (fallthrough)
        -:   78:		{
  6575000:   79:			((char*)&G)[x] = rand() * 256;
call    0 returned 6575000
        -:   80:		}
        -:   81:
        -:   82:		// Set a random game configuration
        -:   83:		// Set the number of players where the max is 4 and the min is 2
      250:   84:		G.numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 250
        -:   85:		// Select the current player
      250:   86:		G.whoseTurn = rand() % G.numPlayers;
call    0 returned 250
        -:   87:		// Add +1 buy as the card specifies it
      250:   88:		G.numBuys = 0;
        -:   89:		// Assign the count deck for the player that is currently playing
      250:   90:		G.deckCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   91:		// Assign the  hand count for the player that is currently playing
      250:   92:		G.handCount[G.whoseTurn] = rand() % (MAX_HAND - 3 + 1) + 3;
call    0 returned 250
        -:   93:		// Set randomly the number of discarded cards
      250:   94:		G.discardCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   95:		// Now lets choose a card from the hand deck
      250:   96:		handpos = rand() % G.handCount[G.whoseTurn];
call    0 returned 250
        -:   97:
        -:   98:		// copy the game state to a test case before calling the cardEffect
      250:   99:		memcpy(&testG, &G, sizeof(struct gameState));
        -:  100:
        -:  101:		// Test the cardEffect() function
      250:  102:		test = cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 250
      250:  103:        if (test != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 250
    #####:  104:            printf("cardEffect function failed");
call    0 never executed
    #####:  105:            cEFunctionFailed++;
        -:  106:        };
        -:  107:
        -:  108:        // Check the hand count
      250:  109:        if ((testG.handCount[G.whoseTurn]) != G.handCount[G.whoseTurn] + 4 - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  110:        {
    #####:  111:        	printf("Failed: Hand Count: %d, Expected: %d \n\n", testG.handCount[G.whoseTurn], G.handCount[G.whoseTurn]+ 4 -1);
call    0 never executed
    #####:  112:        	handCountFailed++;
        -:  113:        }
        -:  114:
        -:  115:        // Check to see if the total deck cards is the same
      250:  116:        totalCards = G.deckCount[G.whoseTurn] + G.discardCount[G.whoseTurn];
      250:  117:		copytotalCards = testG.deckCount[G.whoseTurn] + testG.discardCount[G.whoseTurn];
      250:  118:		if (copytotalCards != totalCards - 4) 
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  119:		{
    #####:  120:			printf("Failed: Total Cards: %d, Expected: %d \n\n", copytotalCards, totalCards-4);
call    0 never executed
    #####:  121:			deckTotalFailed++;
        -:  122:		}
        -:  123:
        -:  124:		// test buys using state struct
      250:  125:		if (testG.numBuys != G.numBuys + 1) 
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  126:		{
    #####:  127:	        printf("Failed: Buy Count: %d, Expected: %d \n\n", testG.numBuys, G.numBuys+1);
call    0 never executed
    #####:  128:	        buyFails++;
        -:  129:        
        -:  130:	    }
        -:  131:
        -:  132:		// confirm that each player got a card
     1014:  133:	    for (n = 0; n < G.numPlayers; n++) 
branch  0 taken 764
branch  1 taken 250 (fallthrough)
        -:  134:	    {
      764:  135:          if (n != G.whoseTurn) 
branch  0 taken 514 (fallthrough)
branch  1 taken 250
        -:  136:          {
      514:  137:	          copyPlayerHand[n] = testG.handCount[n];
      514:  138:	          playerHand[n] = G.handCount[n];
        -:  139:
        -:  140:          }
        -:  141:        }
        -:  142:
     1014:  143:	    for (n = 0; n < G.numPlayers; n++) 
branch  0 taken 764
branch  1 taken 250 (fallthrough)
        -:  144:	    {
      764:  145:            if (n != G.whoseTurn) 
branch  0 taken 514 (fallthrough)
branch  1 taken 250
        -:  146:            {
      514:  147:                if (copyPlayerHand[n] != playerHand[n] + 1) 
branch  0 taken 514 (fallthrough)
branch  1 taken 0
        -:  148:                {
      514:  149:					printf("Failed: Other Player Hand Count: %d, Expected: %d \n\n", copyPlayerHand[n],  playerHand[n] + 1);
call    0 returned 514
      514:  150:					playersHandNotMatch++;
        -:  151:                }
        -:  152:            }
        -:  153:        }
        -:  154:	}
        -:  155:
        1:  156:	if (cEFunctionFailed == 0 && handCountFailed == 0 && deckTotalFailed == 0 && buyFails == 0 && playersHandNotMatch == 0) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        -:  157:	{
    #####:  158:        printf("----NO ERRORS FOUND----\n");
call    0 never executed
        -:  159:    } 
        -:  160:    else
        -:  161:    {
        1:  162:        printf("----Failed----\n");
call    0 returned 1
        1:  163:        printf("cardEffect () function fails: %d\n", cEFunctionFailed);
call    0 returned 1
        1:  164:        printf("Hand count fails: %d\n", handCountFailed);
call    0 returned 1
        1:  165:        printf("Deck total fails: %d\n", discardCardFails);
call    0 returned 1
        1:  166:        printf("Buy fails: %d\n", buyFails);
call    0 returned 1
        1:  167:        printf("Players hand count do not match fails: %d\n", playersHandNotMatch);
call    0 returned 1
        -:  168:    }
        -:  169:
        1:  170:    return 0;
        -:  171:
        -:  172:}
