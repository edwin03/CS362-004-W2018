----------------- Starting Random Test! ----------------
----------------- Testing Card: smithy ----------------
----Failed----
cardEffect () function fails: 0
drawCard () function fails: 0
discardCard() function fails: 0
Hand count fails: 250
Deck count fails: 250
File 'randomtestcard1.c'
Lines executed:91.67% of 48
Branches executed:92.86% of 28
Taken at least once:53.57% of 28
Calls executed:95.65% of 23
Creating 'randomtestcard1.c.gcov'

File 'dominion.c'
Lines executed:36.09% of 568
Branches executed:37.17% of 417
Taken at least once:29.26% of 417
Calls executed:24.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Edwin Rubio
        -:    2:// 02/15/2018
        -:    3:// CS362 - OSU
        -:    4:// File Name: randomtestcard1.c
        -:    5:// Instructions: Write an automed random test generator for three Dominion cards "use the refactored code
        -:    6:// you created for assignement-2", one of them being the adventurer card, and at least one being a card 
        -:    7:// you wrote unit tests for in assignemnt-3. Check these testers in as randomtestcard1.c, 
        -:    8:// randomtestcard2.c, and randomtestadventurer.c.
        -:    9:// smithy card info: action card and add 3 cards
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <stdio.h>
        -:   14:#include <stdlib.h>// rand(), srand()
        -:   15:#include <time.h>// time()
        -:   16:#include <string.h>
        -:   17:#include <assert.h>
        -:   18:#include <math.h>
        -:   19:#include "rngs.h"// Random()
        -:   20:
        -:   21:#define TESTCARD "smithy"
        -:   22:
function main called 1 returned 100% blocks executed 90%
        1:   23:int main() 
        -:   24:{
        -:   25:	// as seen in the playdom.c file in line 43
        1:   26:    int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   27:	int discardCardFails = 0;
        -:   28:	int test;
        -:   29:	int i, x;
        -:   30:	int d1, d2, d3; // draw cards
        -:   31:	int dCTest;
        1:   32:	int dCardFunctionFailed = 0;// drawCard function fails
        1:   33:	int cEFunctionFailed = 0;// cardEffect function fails
        -:   34:	int handCount, testHandCount;
        -:   35:	int deckCount, testDeckCount;
        1:   36:	int handCountFailed = 0;
        1:   37:	int deckCountFails = 0;
        -:   38:
        -:   39:	// variables to hold previous and post state of the game.
        -:   40:	struct gameState G, testG;
        -:   41:	
        -:   42:	//seed rand()
        1:   43:	srand(time(0));
call    0 returned 1
call    1 returned 1
        -:   44:
        1:   45:	printf("----------------- Starting Random Test! ----------------\n");
call    0 returned 1
        1:   46:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 1
        -:   47:
      251:   48:	for (i = 0; i < 250; i++)
branch  0 taken 250
branch  1 taken 1 (fallthrough)
        -:   49:	{
        -:   50:		// Set a random game state on G
  6575250:   51:		for (x = 0; x < sizeof(struct gameState); x++)
branch  0 taken 6575000
branch  1 taken 250 (fallthrough)
        -:   52:		{
  6575000:   53:			((char*)&G)[x] = rand() * 256;
call    0 returned 6575000
        -:   54:		}
        -:   55:
        -:   56:		// Set a random game configuration
        -:   57:		// Set the number of players where the max is 4 and the min is 2
      250:   58:		G.numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 250
        -:   59:		// Select the current player
      250:   60:		G.whoseTurn = rand() % G.numPlayers;
call    0 returned 250
        -:   61:		// Assign the count deck for the player that is currently playing
      250:   62:		G.deckCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   63:		// Assign the  hand count for the player that is currently playing
      250:   64:		G.handCount[G.whoseTurn] = rand() % (MAX_HAND - 3 + 1) + 3;
call    0 returned 250
        -:   65:		// Set randomly the number of discarded cards
      250:   66:		G.discardCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   67:		// Now lets choose a card from the hand deck
      250:   68:		handPos = rand() % G.handCount[G.whoseTurn];
call    0 returned 250
        -:   69:
        -:   70:		// copy the game state to a test case before calling the cardEffect
      250:   71:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   72:
        -:   73:		// Now lets call the cardEffect function with the smithy card
      250:   74:		test = cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 250
        -:   75:
        -:   76:		// get 3 cards
        -:   77:		// Draw cards manually using the manually initizalied game state
      250:   78:		d1 = drawCard(G.whoseTurn, &G); 
call    0 returned 250
      250:   79:		d2 = drawCard(G.whoseTurn, &G);
call    0 returned 250
      250:   80:		d3 = drawCard(G.whoseTurn, &G);
call    0 returned 250
        -:   81:		
        -:   82:		// Check to see if drawCard() function returned -1 (error)
        -:   83:		//You left here!!!!!!!
      250:   84:		if (d1 == -1 || d2 == -1 || d3 == -1)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
branch  2 taken 250 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 250
        -:   85:		{
    #####:   86:			dCardFunctionFailed++;
        -:   87:		}
        -:   88:
        -:   89:		//discard card from hand (line 656 in dominion.c)
      250:   90:    	dCTest = discardCard(handPos, G.whoseTurn, &G, 0);
call    0 returned 250
        -:   91:
        -:   92:    	//Check to see if the dicardCard() function failed
      250:   93:    	if(dCTest != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:   94:    	{
    #####:   95:    		discardCardFails++;
        -:   96:    	}
        -:   97:    	
        -:   98:    	// Check to see if the cardEffect() function failed. It returns
        -:   99:    	// -1.
      250:  100:    	if (test != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  101:    	{
    #####:  102:    		cEFunctionFailed++;
        -:  103:    	}
        -:  104:
        -:  105:    	// Now check to see if the hand count do not match.
      250:  106:    	handCount = G.handCount[G.whoseTurn];
      250:  107:    	testHandCount = testG.handCount[G.whoseTurn];
      250:  108:    	if (handCount != testHandCount)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
        -:  109:    	{
      250:  110:    		handCountFailed++;
        -:  111:    	}
        -:  112:
        -:  113:    	// Now check to see if the deck count do not match
      250:  114:    	deckCount = G.deckCount[G.whoseTurn];
      250:  115:    	testDeckCount = testG.deckCount[G.whoseTurn];
      250:  116:    	if (deckCount != testDeckCount)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
        -:  117:    	{
      250:  118:    		deckCountFails++;
        -:  119:    	}
        -:  120:	}
        -:  121:
        1:  122:	if (dCardFunctionFailed == 0 && discardCardFails == 0 && cEFunctionFailed == 0 && handCountFailed == 0 && deckCountFails == 0) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 1
branch  8 never executed
branch  9 never executed
        -:  123:	{
    #####:  124:        printf("----NO ERRORS FOUND----\n");
call    0 never executed
        -:  125:    } 
        -:  126:    else
        -:  127:    {
        1:  128:        printf("----Failed----\n");
call    0 returned 1
        1:  129:        printf("cardEffect () function fails: %d\n", cEFunctionFailed);
call    0 returned 1
        1:  130:        printf("drawCard () function fails: %d\n", dCardFunctionFailed);
call    0 returned 1
        1:  131:        printf("discardCard() function fails: %d\n", discardCardFails);
call    0 returned 1
        1:  132:        printf("Hand count fails: %d\n", handCountFailed);
call    0 returned 1
        1:  133:        printf("Deck count fails: %d\n", deckCountFails);
call    0 returned 1
        -:  134:    }
        -:  135:
        1:  136:	return 0;
        -:  137:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 40 (fallthrough)
branch  1 taken 110
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 5
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 5
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 50
branch  1 taken 5 (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 500
branch  1 taken 50 (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 450 (fallthrough)
branch  1 taken 50
branch  2 taken 0 (fallthrough)
branch  3 taken 450
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 100
branch  1 taken 5 (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 775
branch  1 taken 50 (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 50 (fallthrough)
branch  1 taken 725
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 50 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 49
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12;}
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       49:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 70
branch  1 taken 10 (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 135
branch  1 taken 5 (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 25
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 5
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15 returned 100% blocks executed 100%
       15:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       15:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       15:  209:  if (state->deckCount[player] < 1)
branch  0 taken 5 (fallthrough)
branch  1 taken 10
        -:  210:  {
        5:  211:	  return -1;
        -:  212:  }
        -:  213:
       10:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 10
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
      120:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  218:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100
      100:  219:    newDeck[newDeckPos] = state->deck[player][card];
      100:  220:    newDeckPos++;
      337:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 237
branch  1 taken 100 (fallthrough)
      237:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
      100:  224:    state->deckCount[player]--;
        -:  225:  }
      110:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  227:    state->deck[player][i] = newDeck[i];
      100:  228:    state->deckCount[player]++;
        -:  229:  }
        -:  230:
       10:  231:  return 0;
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
call    0 never executed
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  271:	
    #####:  272:  return 0;
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 516 returned 100% blocks executed 100%
      516:  349:int whoseTurn(struct gameState *state) {
      516:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 3 returned 100% blocks executed 100%
        3:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
        3:  398:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  399:    {
        1:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
        2:  404:  j = 0;
       52:  405:  for (i = 0; i < 25; i++)
branch  0 taken 50
branch  1 taken 2 (fallthrough)
        -:  406:    {
       50:  407:      if (state->supplyCount[i] == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 47
        -:  408:	{
        3:  409:	  j++;
        -:  410:	}
        -:  411:    }
        2:  412:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  413:    {
        1:  414:      return 1;
        -:  415:    }
        -:  416:
        1:  417:  return 0;
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
        -:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  477:	}
        -:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
        -:  487:	}
        -:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
        -:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
        -:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 1297 returned 100% blocks executed 85%
     1297:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:	//printf("inside drawCard\n");
        -:  531:	int count;
        -:  532:  int deckCounter;
     1297:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4 (fallthrough)
branch  1 taken 1293
        -:  534:	  //printf("deck is empty\n");
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
        4:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
        4:  543:    state->deckCount[player] = state->discardCount[player];
        4:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
        4:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 4
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
        4:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
        4:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
        4:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
        4:  564:    if (deckCounter == 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
     1293:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
     1293:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1293:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1293:  581:    state->deckCount[player]--;
     1293:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
     1293:  585:  return 0;
        -:  586:}
        -:  587:
function getCost called 28 returned 100% blocks executed 100%
       28:  588:int getCost(int cardNumber)
        -:  589:{
       28:  590:  switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  591:    {
        -:  592:    case curse:
        1:  593:      return 0;
        -:  594:    case estate:
        1:  595:      return 2;
        -:  596:    case duchy:
        1:  597:      return 5;
        -:  598:    case province:
        1:  599:      return 8;
        -:  600:    case copper:
        1:  601:      return 0;
        -:  602:    case silver:
        1:  603:      return 3;
        -:  604:    case gold:
        1:  605:      return 6;
        -:  606:    case adventurer:
        1:  607:      return 6;
        -:  608:    case council_room:
        1:  609:      return 5;
        -:  610:    case feast:
        1:  611:      return 4;
        -:  612:    case gardens:
        1:  613:      return 4;
        -:  614:    case mine:
        1:  615:      return 5;
        -:  616:    case remodel:
        1:  617:      return 4;
        -:  618:    case smithy:
        1:  619:      return 4;
        -:  620:    case village:
        1:  621:      return 3;
        -:  622:    case baron:
        1:  623:      return 4;
        -:  624:    case great_hall:
        1:  625:      return 3;
        -:  626:    case minion:
        1:  627:      return 5;
        -:  628:    case steward:
        1:  629:      return 3;
        -:  630:    case tribute:
        1:  631:      return 5;
        -:  632:    case ambassador:
        1:  633:      return 3;
        -:  634:    case cutpurse:
        1:  635:      return 4;
        -:  636:    case embargo: 
        1:  637:      return 2;
        -:  638:    case outpost:
        1:  639:      return 5;
        -:  640:    case salvager:
        1:  641:      return 4;
        -:  642:    case sea_hag:
        1:  643:      return 4;
        -:  644:    case treasure_map:
        1:  645:      return 4;
        -:  646:    }
        -:  647:	
        1:  648:  return -1;
        -:  649:}
        -:  650:
function adventurer_effect called 2 returned 100% blocks executed 100%
        2:  651:void adventurer_effect(struct gameState *state, int handPos)
        -:  652:{
        2:  653:	int drawntreasure = 0;
        2:  654:	int currentPlayer = whoseTurn(state);
call    0 returned 2
        -:  655:	int cardDrawn;
        -:  656:	int temphand[MAX_HAND];
        2:  657:	int z = 0;
        -:  658:
       10:  659:	while (drawntreasure<2) {
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  660:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  661:			shuffle(currentPlayer, state); //This does nothing. Tries to shuffle an empty deck.
call    0 returned 1
        -:  662:		}
        6:  663:		drawCard(currentPlayer, state);
call    0 returned 6
        6:  664:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        6:  665:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        4:  666:			drawntreasure++;
        -:  667:		else {
        2:  668:			temphand[z] = cardDrawn;
        2:  669:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  670:			z++;
        -:  671:		}
        -:  672:	}
        -:  673:
        5:  674:	while (z - 1 >= 1) { //BUG: Changed (z - 1 >= 0) to (z - 1 >= 1).
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:  675:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        1:  676:		z = z - 1;
        -:  677:	}
        -:  678:
        -:  679:	//discard adventurer card?
        -:  680:	//discardCard(handPos, currentPlayer, state, 0);
        2:  681:}
        -:  682:
function smithy_effect called 252 returned 100% blocks executed 100%
      252:  683:void smithy_effect(struct gameState *state, int handPos)
        -:  684:{
      252:  685:	int currentPlayer = whoseTurn(state);
call    0 returned 252
        -:  686:
        -:  687:	//+3 Cards
        -:  688:	int i;
      756:  689:	for (i = 1; i < 3; i++) //BUG changed i=0 to i=1.
branch  0 taken 504
branch  1 taken 252 (fallthrough)
        -:  690:	{
      504:  691:		drawCard(currentPlayer, state);
call    0 returned 504
        -:  692:	}
        -:  693:
        -:  694:	//discard card from hand
      252:  695:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 252
      252:  696:}
        -:  697:
function village_effect called 2 returned 100% blocks executed 100%
        2:  698:void village_effect(struct gameState *state, int handPos)
        -:  699:{
        2:  700:	int currentPlayer = whoseTurn(state);
call    0 returned 2
        -:  701:
        -:  702:	//+1 Card
        2:  703:	drawCard(currentPlayer, state);
call    0 returned 2
        -:  704:
        -:  705:	//+2 Actions
        2:  706:	state->numActions = 2; //BUG changed [= state->numActions + 2] to [= 2].
        -:  707:
        -:  708:	//discard played card from hand
        2:  709:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2:  710:}
        -:  711:
function great_hall_effect called 0 returned 0% blocks executed 0%
    #####:  712:void great_hall_effect(struct gameState *state, int handPos)
        -:  713:{
    #####:  714:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  715:
        -:  716:	//+1 Card
    #####:  717:	drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:	//+1 Actions
    #####:  720:	state->numActions++;
        -:  721:
        -:  722:	//discard card from hand
    #####:  723:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function steward_effect called 0 returned 0% blocks executed 0%
    #####:  726:void steward_effect(struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -:  727:{
    #####:  728:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  729:
    #####:  730:	if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  731:	{
        -:  732:		//+2 cards
    #####:  733:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  734:		drawCard(currentPlayer, state);
call    0 never executed
        -:  735:	}
    #####:  736:	else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  737:	{
        -:  738:		//+2 coins
    #####:  739:		state->coins = state->coins + 2;
        -:  740:	}
        -:  741:	else
        -:  742:	{
        -:  743:		//trash 2 cards in hand
    #####:  744:		discardCard(choice1, currentPlayer, state, 1); //BUG: changed choice2 to choice1.
call    0 never executed
    #####:  745:		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  746:	}
        -:  747:
        -:  748:	//discard card from hand
    #####:  749:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  750:}
        -:  751:
        -:  752:
function cardEffect called 258 returned 100% blocks executed 10%
      258:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
      258:  760:  int currentPlayer = whoseTurn(state);
call    0 returned 258
      258:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
      258:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND];// moved above the if statement
        -:  765:  //int drawntreasure=0;
        -:  766:  //int cardDrawn;
        -:  767:  //int z = 0;// this is the counter for the temp hand
      258:  768:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 75 (fallthrough)
branch  1 taken 183
       75:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
      258:  774:  switch( card ) 
branch  0 taken 2
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 252
branch  7 taken 2
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  775:    {
        -:  776:    case adventurer:
        2:  777:		adventurer_effect(state, handPos);
call    0 returned 2
        2:  778:		return 0;
        -:  779:			
        -:  780:    case council_room:
        -:  781:      //+4 Cards
       10:  782:      for (i = 0; i < 4; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  783:	{
        8:  784:	  drawCard(currentPlayer, state);
call    0 returned 8
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
        2:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
        6:  791:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  792:	{
        4:  793:	  if ( i != currentPlayer )
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  794:	    {
        2:  795:	      drawCard(i, state);
call    0 returned 2
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
        2:  800:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -:  801:			
        2:  802:      return 0;
        -:  803:			
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case smithy:
      252:  922:		smithy_effect(state, handPos);
call    0 returned 252
      252:  923:		return 0;
        -:  924:		
        -:  925:    case village:
        2:  926:		village_effect(state, handPos);
call    0 returned 2
        2:  927:		return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  947:	    if(DEBUG) {
        -:  948:	      printf("No estate cards in your hand, invalid choice\n");
        -:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  955:		isGameOver(state);
call    0 never executed
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  972:	    isGameOver(state);
call    0 never executed
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
    #####:  981:		great_hall_effect(state, handPos);
call    0 never executed
    #####:  982:		return 0;
        -:  983:		
        -:  984:    case minion:
        -:  985:      //+1 action
    #####:  986:      state->numActions++;
        -:  987:			
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  990:			
    #####:  991:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:			
    #####:  996:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  997:	{
        -:  998:	  //discard hand
    #####:  999:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1000:	    {
    #####: 1001:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //draw 4
    #####: 1005:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //other players discard hand and redraw if hand size > 4
    #####: 1011:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1014:		{
    #####: 1015:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
        -: 1017:		      //discard hand
    #####: 1018:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1021:			}
        -: 1022:							
        -: 1023:		      //draw 4
    #####: 1024:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  drawCard(i, state);
call    0 never executed
        -: 1027:			}
        -: 1028:		    }
        -: 1029:		}
        -: 1030:	    }
        -: 1031:				
        -: 1032:	}
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case steward:
    #####: 1036:		steward_effect(state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1037:		return 0;
        -: 1038:		
        -: 1039:    case tribute:
    #####: 1040:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1041:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	  state->deckCount[nextPlayer]--;
        -: 1044:	}
    #####: 1045:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1046:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1047:	  state->discardCount[nextPlayer]--;
        -: 1048:	}
        -: 1049:	else{
        -: 1050:	  //No Card to Reveal
        -: 1051:	  if (DEBUG){
        -: 1052:	    printf("No cards to reveal\n");
        -: 1053:	  }
        -: 1054:	}
        -: 1055:      }
        -: 1056:	    
        -: 1057:      else{
    #####: 1058:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1061:	    state->deckCount[nextPlayer]++;
    #####: 1062:	    state->discard[nextPlayer][i] = -1;
    #####: 1063:	    state->discardCount[nextPlayer]--;
        -: 1064:	  }
        -: 1065:			    
    #####: 1066:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1067:	} 
    #####: 1068:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    #####: 1071:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:	state->deckCount[nextPlayer]--;
        -: 1074:      }    
        -: 1075:		       
    #####: 1076:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1077:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1078:	state->playedCardCount++;
    #####: 1079:	tributeRevealedCards[1] = -1;
        -: 1080:      }
        -: 1081:
    #####: 1082:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1083:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1084:	  state->coins += 2;
        -: 1085:	}
        -: 1086:		    
    #####: 1087:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1088:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1089:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1090:	}
        -: 1091:	else{//Action Card
    #####: 1092:	  state->numActions = state->numActions + 2;
        -: 1093:	}
        -: 1094:      }
        -: 1095:	    
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case ambassador:
    #####: 1099:      j = 0;		//used to check if player has enough cards to discard
        -: 1100:
    #####: 1101:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:	{
    #####: 1103:	  return -1;				
        -: 1104:	}
        -: 1105:
    #####: 1106:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1114:	    {
    #####: 1115:	      j++;
        -: 1116:	    }
        -: 1117:	}
    #####: 1118:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  return -1;				
        -: 1121:	}
        -: 1122:
        -: 1123:      if (DEBUG) 
        -: 1124:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1125:
        -: 1126:      //increase supply count for choosen card by amount being discarded
    #####: 1127:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1128:			
        -: 1129:      //each other player gains a copy of revealed card
    #####: 1130:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1133:	    {
    #####: 1134:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1135:	    }
        -: 1136:	}
        -: 1137:
        -: 1138:      //discard played card from hand
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1140:
        -: 1141:      //trash copies of cards returned to supply
    #####: 1142:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1147:		{
    #####: 1148:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1149:		  break;
        -: 1150:		}
        -: 1151:	    }
        -: 1152:	}			
        -: 1153:
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case cutpurse:
        -: 1157:
    #####: 1158:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1159:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	{
    #####: 1161:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1164:		{
    #####: 1165:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1166:		    {
    #####: 1167:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1168:		      break;
        -: 1169:		    }
    #####: 1170:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1171:		    {
    #####: 1172:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1173:			{
        -: 1174:			  if (DEBUG)
        -: 1175:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1176:			}	
    #####: 1177:		      break;
        -: 1178:		    }		
        -: 1179:		}
        -: 1180:					
        -: 1181:	    }
        -: 1182:				
        -: 1183:	}				
        -: 1184:
        -: 1185:      //discard played card from hand
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1187:
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:		
        -: 1191:    case embargo: 
        -: 1192:      //+2 Coins
    #####: 1193:      state->coins = state->coins + 2;
        -: 1194:			
        -: 1195:      //see if selected pile is in play
    #####: 1196:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:			
        -: 1201:      //add embargo token to selected supply pile
    #####: 1202:      state->embargoTokens[choice1]++;
        -: 1203:			
        -: 1204:      //trash card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case outpost:
        -: 1209:      //set outpost flag
    #####: 1210:      state->outpostPlayed++;
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case salvager:
        -: 1217:      //+1 buy
    #####: 1218:      state->numBuys++;
        -: 1219:			
    #####: 1220:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1221:	{
        -: 1222:	  //gain coins equal to trashed card
    #####: 1223:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1224:	  //trash card
    #####: 1225:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1226:	}
        -: 1227:			
        -: 1228:      //discard card
    #####: 1229:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case sea_hag:
    #####: 1233:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1234:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1235:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1236:	  state->discardCount[i]++;
    #####: 1237:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1238:	}
        -: 1239:      }
    #####: 1240:      return 0;
        -: 1241:		
        -: 1242:    case treasure_map:
        -: 1243:      //search hand for another treasure_map
    #####: 1244:      index = -1;
    #####: 1245:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1248:	    {
    #####: 1249:	      index = i;
    #####: 1250:	      break;
        -: 1251:	    }
        -: 1252:	}
    #####: 1253:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1254:	{
        -: 1255:	  //trash both treasure cards
    #####: 1256:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1258:
        -: 1259:	  //gain 4 Gold cards
    #####: 1260:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1263:	    }
        -: 1264:				
        -: 1265:	  //return success
    #####: 1266:	  return 1;
        -: 1267:	}
        -: 1268:			
        -: 1269:      //no second treasure_map found in hand
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
    #####: 1273:  return -1;
        -: 1274:}
        -: 1275:
function discardCard called 506 returned 100% blocks executed 78%
      506: 1276:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1277:{
        -: 1278:  //if card is not trashed, added to Played pile 
      506: 1279:  if (trashFlag < 1)
branch  0 taken 506 (fallthrough)
branch  1 taken 0
        -: 1280:    {
        -: 1281:      //add card to played pile
      506: 1282:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      506: 1283:      state->playedCardCount++;
        -: 1284:    }
        -: 1285:	
        -: 1286:  //set played card to -1
      506: 1287:  state->hand[currentPlayer][handPos] = -1;
        -: 1288:	
        -: 1289:  //remove card from player's hand
      506: 1290:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 506
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
      506: 1295:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 506
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:  else 	
        -: 1301:    {
        -: 1302:      //replace discarded card with last card in hand
      506: 1303:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1304:      //set last card to -1
      506: 1305:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1306:      //reduce number of cards in hand
      506: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
      506: 1309:  return 0;
        -: 1310:}
        -: 1311:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1312:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1313:{
        -: 1314:  //Note: supplyPos is enum of choosen card
        -: 1315:	
        -: 1316:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1317:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1318:    {
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //added card for [whoseTurn] current player:
        -: 1323:  // toFlag = 0 : add to discard
        -: 1324:  // toFlag = 1 : add to deck
        -: 1325:  // toFlag = 2 : add to hand
        -: 1326:
    #####: 1327:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1328:    {
    #####: 1329:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1330:      state->deckCount[player]++;
        -: 1331:    }
    #####: 1332:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1335:      state->handCount[player]++;
        -: 1336:    }
        -: 1337:  else
        -: 1338:    {
    #####: 1339:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1340:      state->discardCount[player]++;
        -: 1341:    }
        -: 1342:	
        -: 1343:  //decrease number in supply pile
    #####: 1344:  state->supplyCount[supplyPos]--;
        -: 1345:	 
    #####: 1346:  return 0;
        -: 1347:}
        -: 1348:
function updateCoins called 7 returned 100% blocks executed 100%
        7: 1349:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1350:{
        -: 1351:  int i;
        -: 1352:	
        -: 1353:  //reset coin count
        7: 1354:  state->coins = 0;
        -: 1355:
        -: 1356:  //add coins for each Treasure card in player's hand
       42: 1357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 35
branch  1 taken 7 (fallthrough)
        -: 1358:    {
       35: 1359:      if (state->hand[player][i] == copper)
branch  0 taken 26 (fallthrough)
branch  1 taken 9
        -: 1360:	{
       26: 1361:	  state->coins += 1;
        -: 1362:	}
        9: 1363:      else if (state->hand[player][i] == silver)
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -: 1364:	{
        1: 1365:	  state->coins += 2;
        -: 1366:	}
        8: 1367:      else if (state->hand[player][i] == gold)
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        -: 1368:	{
        1: 1369:	  state->coins += 3;
        -: 1370:	}	
        -: 1371:    }	
        -: 1372:
        -: 1373:  //add bonus
        7: 1374:  state->coins += bonus;
        -: 1375:
        7: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:
        -: 1380://end of dominion.c
        -: 1381:
