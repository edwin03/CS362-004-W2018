        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Edwin Rubio
        -:    2:// 02/15/2018
        -:    3:// CS362 - OSU
        -:    4:// File Name: randomtestcard1.c
        -:    5:// Instructions: Write an automed random test generator for three Dominion cards "use the refactored code
        -:    6:// you created for assignement-2", one of them being the adventurer card, and at least one being a card 
        -:    7:// you wrote unit tests for in assignemnt-3. Check these testers in as randomtestcard1.c, 
        -:    8:// randomtestcard2.c, and randomtestadventurer.c.
        -:    9:// smithy card info: action card and add 3 cards
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <stdio.h>
        -:   14:#include <stdlib.h>// rand(), srand()
        -:   15:#include <time.h>// time()
        -:   16:#include <string.h>
        -:   17:#include <assert.h>
        -:   18:#include <math.h>
        -:   19:#include "rngs.h"// Random()
        -:   20:
        -:   21:#define TESTCARD "smithy"
        -:   22:
function main called 1 returned 100% blocks executed 90%
        1:   23:int main() 
        -:   24:{
        -:   25:	// as seen in the playdom.c file in line 43
        1:   26:    int handPos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   27:	int discardCardFails = 0;
        -:   28:	int test;
        -:   29:	int i, x;
        -:   30:	int d1, d2, d3; // draw cards
        -:   31:	int dCTest;
        1:   32:	int dCardFunctionFailed = 0;// drawCard function fails
        1:   33:	int cEFunctionFailed = 0;// cardEffect function fails
        -:   34:	int handCount, testHandCount;
        -:   35:	int deckCount, testDeckCount;
        1:   36:	int handCountFailed = 0;
        1:   37:	int deckCountFails = 0;
        -:   38:
        -:   39:	// variables to hold previous and post state of the game.
        -:   40:	struct gameState G, testG;
        -:   41:	
        -:   42:	//seed rand()
        1:   43:	srand(time(0));
call    0 returned 1
call    1 returned 1
        -:   44:
        1:   45:	printf("----------------- Starting Random Test! ----------------\n");
call    0 returned 1
        1:   46:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 1
        -:   47:
      251:   48:	for (i = 0; i < 250; i++)
branch  0 taken 250
branch  1 taken 1 (fallthrough)
        -:   49:	{
        -:   50:		// Set a random game state on G
  6575250:   51:		for (x = 0; x < sizeof(struct gameState); x++)
branch  0 taken 6575000
branch  1 taken 250 (fallthrough)
        -:   52:		{
  6575000:   53:			((char*)&G)[x] = rand() * 256;
call    0 returned 6575000
        -:   54:		}
        -:   55:
        -:   56:		// Set a random game configuration
        -:   57:		// Set the number of players where the max is 4 and the min is 2
      250:   58:		G.numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 250
        -:   59:		// Select the current player
      250:   60:		G.whoseTurn = rand() % G.numPlayers;
call    0 returned 250
        -:   61:		// Assign the count deck for the player that is currently playing
      250:   62:		G.deckCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   63:		// Assign the  hand count for the player that is currently playing
      250:   64:		G.handCount[G.whoseTurn] = rand() % (MAX_HAND - 3 + 1) + 3;
call    0 returned 250
        -:   65:		// Set randomly the number of discarded cards
      250:   66:		G.discardCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   67:		// Now lets choose a card from the hand deck
      250:   68:		handPos = rand() % G.handCount[G.whoseTurn];
call    0 returned 250
        -:   69:
        -:   70:		// copy the game state to a test case before calling the cardEffect
      250:   71:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   72:
        -:   73:		// Now lets call the cardEffect function with the smithy card
      250:   74:		test = cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 250
        -:   75:
        -:   76:		// get 3 cards
        -:   77:		// Draw cards manually using the manually initizalied game state
      250:   78:		d1 = drawCard(G.whoseTurn, &G); 
call    0 returned 250
      250:   79:		d2 = drawCard(G.whoseTurn, &G);
call    0 returned 250
      250:   80:		d3 = drawCard(G.whoseTurn, &G);
call    0 returned 250
        -:   81:		
        -:   82:		// Check to see if drawCard() function returned -1 (error)
        -:   83:		//You left here!!!!!!!
      250:   84:		if (d1 == -1 || d2 == -1 || d3 == -1)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
branch  2 taken 250 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 250
        -:   85:		{
    #####:   86:			dCardFunctionFailed++;
        -:   87:		}
        -:   88:
        -:   89:		//discard card from hand (line 656 in dominion.c)
      250:   90:    	dCTest = discardCard(handPos, G.whoseTurn, &G, 0);
call    0 returned 250
        -:   91:
        -:   92:    	//Check to see if the dicardCard() function failed
      250:   93:    	if(dCTest != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:   94:    	{
    #####:   95:    		discardCardFails++;
        -:   96:    	}
        -:   97:    	
        -:   98:    	// Check to see if the cardEffect() function failed. It returns
        -:   99:    	// -1.
      250:  100:    	if (test != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  101:    	{
    #####:  102:    		cEFunctionFailed++;
        -:  103:    	}
        -:  104:
        -:  105:    	// Now check to see if the hand count do not match.
      250:  106:    	handCount = G.handCount[G.whoseTurn];
      250:  107:    	testHandCount = testG.handCount[G.whoseTurn];
      250:  108:    	if (handCount != testHandCount)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
        -:  109:    	{
      250:  110:    		handCountFailed++;
        -:  111:    	}
        -:  112:
        -:  113:    	// Now check to see if the deck count do not match
      250:  114:    	deckCount = G.deckCount[G.whoseTurn];
      250:  115:    	testDeckCount = testG.deckCount[G.whoseTurn];
      250:  116:    	if (deckCount != testDeckCount)
branch  0 taken 250 (fallthrough)
branch  1 taken 0
        -:  117:    	{
      250:  118:    		deckCountFails++;
        -:  119:    	}
        -:  120:	}
        -:  121:
        1:  122:	if (dCardFunctionFailed == 0 && discardCardFails == 0 && cEFunctionFailed == 0 && handCountFailed == 0 && deckCountFails == 0) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 1
branch  8 never executed
branch  9 never executed
        -:  123:	{
    #####:  124:        printf("----NO ERRORS FOUND----\n");
call    0 never executed
        -:  125:    } 
        -:  126:    else
        -:  127:    {
        1:  128:        printf("----Failed----\n");
call    0 returned 1
        1:  129:        printf("cardEffect () function fails: %d\n", cEFunctionFailed);
call    0 returned 1
        1:  130:        printf("drawCard () function fails: %d\n", dCardFunctionFailed);
call    0 returned 1
        1:  131:        printf("discardCard() function fails: %d\n", discardCardFails);
call    0 returned 1
        1:  132:        printf("Hand count fails: %d\n", handCountFailed);
call    0 returned 1
        1:  133:        printf("Deck count fails: %d\n", deckCountFails);
call    0 returned 1
        -:  134:    }
        -:  135:
        1:  136:	return 0;
        -:  137:}
