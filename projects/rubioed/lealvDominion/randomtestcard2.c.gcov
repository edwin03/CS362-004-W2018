        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Edwin Rubio
        -:    2:// 02/16/2018
        -:    3:// CS362 - OSU
        -:    4:// File Name: randomtestcard2.c
        -:    5:// Instructions: Write an automed random test generator for three Dominion cards "use the refactored code
        -:    6:// you created for assignement-2", one of them being the adventurer card, and at least one being a card 
        -:    7:// you wrote unit tests for in assignemnt-3. Check these testers in as randomtestcard1.c, 
        -:    8:// randomtestcard2.c, and randomtestadventurer.c.
        -:    9:// council room card info: +4 cards, +1 buy.  Each other player draws a card. 
        -:   10:/*
        -:   11:council_roomCard() function:
        -:   12:void council_roomCard (int currentPlayer, struct gameState *state, int handPos)
        -:   13:{
        -:   14:  int i;//I added this here...
        -:   15:  //+4 Cards
        -:   16:  for (i = 0; i < 4; i++)
        -:   17:  {
        -:   18:    drawCard(currentPlayer, state);
        -:   19:  }
        -:   20:              
        -:   21:  //+1 Buy
        -:   22:  state->numBuys++;
        -:   23:              
        -:   24:  //Each other player draws a card
        -:   25:  for (i = 0; i < state->numPlayers; i++)
        -:   26:  {
        -:   27:    if ( i != currentPlayer )
        -:   28:    {
        -:   29:      drawCard(i, state);
        -:   30:    }
        -:   31:    i++;//I introduced this bug here, this will skip half of the players. First player will draw a card, then second wont, then 3rd will draw, etc.
        -:   32:  }
        -:   33:              
        -:   34:  //put played card in played card pile
        -:   35:  discardCard(handPos, currentPlayer, state, 0);
        -:   36:}
        -:   37:*/
        -:   38:#include "dominion.h"
        -:   39:#include "dominion_helpers.h"
        -:   40:#include <stdio.h>
        -:   41:#include <stdlib.h>// rand(), srand()
        -:   42:#include <time.h>// time()
        -:   43:#include <string.h>
        -:   44:#include <assert.h>
        -:   45:#include <math.h>
        -:   46:#include "rngs.h"// Random()
        -:   47:
        -:   48:#define TESTCARD "council_room"
        -:   49:
function main called 1 returned 100% blocks executed 84%
        1:   50:int main() 
        -:   51:{
        -:   52:	// as seen in the playdom.c file in line 88
        1:   53:    int handpos = 0, choice1 = -1, choice2 = -1, choice3 = -1, bonus = 0;
        1:   54:	int discardCardFails = 0;
        -:   55:	int test;
        -:   56:	int i, x, n;
        1:   57:	int cEFunctionFailed = 0;// cardEffect function fails
        1:   58:	int handCountFailed = 0;
        1:   59:	int totalCards = 0, copytotalCards = 0, deckTotalFailed = 0, buyFails = 0;
        1:   60:	int playersHandNotMatch = 0;
        -:   61:	int playerHand[4];
        -:   62:    int copyPlayerHand[4];
        -:   63:
        -:   64:	// variables to hold previous and post state of the game.
        -:   65:	struct gameState G, testG;
        -:   66:	
        -:   67:	//seed rand()
        1:   68:	srand(time(0));
call    0 returned 1
call    1 returned 1
        -:   69:
        1:   70:	printf("----------------- Starting Random Test! ----------------\n");
call    0 returned 1
        1:   71:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 1
        -:   72:
      251:   73:	for (i = 0; i < 250; i++)
branch  0 taken 250
branch  1 taken 1 (fallthrough)
        -:   74:	{
        -:   75:		// Set a random game state on G
  6575250:   76:		for (x = 0; x < sizeof(struct gameState); x++)
branch  0 taken 6575000
branch  1 taken 250 (fallthrough)
        -:   77:		{
  6575000:   78:			((char*)&G)[x] = rand() * 256;
call    0 returned 6575000
        -:   79:		}
        -:   80:
        -:   81:		// Set a random game configuration
        -:   82:		// Set the number of players where the max is 4 and the min is 2
      250:   83:		G.numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 250
        -:   84:		// Select the current player
      250:   85:		G.whoseTurn = rand() % G.numPlayers;
call    0 returned 250
        -:   86:		// Add +1 buy as the card specifies it
      250:   87:		G.numBuys = 0;
        -:   88:		// Assign the count deck for the player that is currently playing
      250:   89:		G.deckCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   90:		// Assign the  hand count for the player that is currently playing
      250:   91:		G.handCount[G.whoseTurn] = rand() % (MAX_HAND - 3 + 1) + 3;
call    0 returned 250
        -:   92:		// Set randomly the number of discarded cards
      250:   93:		G.discardCount[G.whoseTurn] = rand() % (MAX_DECK - 3 + 1) + 3;
call    0 returned 250
        -:   94:		// Now lets choose a card from the hand deck
      250:   95:		handpos = rand() % G.handCount[G.whoseTurn];
call    0 returned 250
        -:   96:
        -:   97:		// copy the game state to a test case before calling the cardEffect
      250:   98:		memcpy(&testG, &G, sizeof(struct gameState));
        -:   99:
        -:  100:		// Test the cardEffect() function
      250:  101:		test = cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 250
      250:  102:        if (test != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 250
    #####:  103:            printf("cardEffect function failed");
call    0 never executed
    #####:  104:            cEFunctionFailed++;
        -:  105:        };
        -:  106:
        -:  107:        // Check the hand count
      250:  108:        if ((testG.handCount[G.whoseTurn]) != G.handCount[G.whoseTurn] + 4 - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  109:        {
    #####:  110:        	printf("Failed: Hand Count: %d, Expected: %d \n\n", testG.handCount[G.whoseTurn], G.handCount[G.whoseTurn]+ 4 -1);
call    0 never executed
    #####:  111:        	handCountFailed++;
        -:  112:        }
        -:  113:
        -:  114:        // Check to see if the total deck cards is the same
      250:  115:        totalCards = G.deckCount[G.whoseTurn] + G.discardCount[G.whoseTurn];
      250:  116:		copytotalCards = testG.deckCount[G.whoseTurn] + testG.discardCount[G.whoseTurn];
      250:  117:		if (copytotalCards != totalCards - 4) 
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  118:		{
    #####:  119:			printf("Failed: Total Cards: %d, Expected: %d \n\n", copytotalCards, totalCards-4);
call    0 never executed
    #####:  120:			deckTotalFailed++;
        -:  121:		}
        -:  122:
        -:  123:		// test buys using state struct
      250:  124:		if (testG.numBuys != G.numBuys + 1) 
branch  0 taken 0 (fallthrough)
branch  1 taken 250
        -:  125:		{
    #####:  126:	        printf("Failed: Buy Count: %d, Expected: %d \n\n", testG.numBuys, G.numBuys+1);
call    0 never executed
    #####:  127:	        buyFails++;
        -:  128:        
        -:  129:	    }
        -:  130:
        -:  131:		// confirm that each player got a card
     1008:  132:	    for (n = 0; n < G.numPlayers; n++) 
branch  0 taken 758
branch  1 taken 250 (fallthrough)
        -:  133:	    {
      758:  134:          if (n != G.whoseTurn) 
branch  0 taken 508 (fallthrough)
branch  1 taken 250
        -:  135:          {
      508:  136:	          copyPlayerHand[n] = testG.handCount[n];
      508:  137:	          playerHand[n] = G.handCount[n];
        -:  138:
        -:  139:          }
        -:  140:        }
        -:  141:
     1008:  142:	    for (n = 0; n < G.numPlayers; n++) 
branch  0 taken 758
branch  1 taken 250 (fallthrough)
        -:  143:	    {
      758:  144:            if (n != G.whoseTurn) 
branch  0 taken 508 (fallthrough)
branch  1 taken 250
        -:  145:            {
      508:  146:                if (copyPlayerHand[n] != playerHand[n] + 1) 
branch  0 taken 508 (fallthrough)
branch  1 taken 0
        -:  147:                {
      508:  148:					printf("Failed: Other Player Hand Count: %d, Expected: %d \n\n", copyPlayerHand[n],  playerHand[n] + 1);
call    0 returned 508
      508:  149:					playersHandNotMatch++;
        -:  150:                }
        -:  151:            }
        -:  152:        }
        -:  153:	}
        -:  154:
        1:  155:	if (cEFunctionFailed == 0 && handCountFailed == 0 && deckTotalFailed == 0 && buyFails == 0 && playersHandNotMatch == 0) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        -:  156:	{
    #####:  157:        printf("----NO ERRORS FOUND----\n");
call    0 never executed
        -:  158:    } 
        -:  159:    else
        -:  160:    {
        1:  161:        printf("----Failed----\n");
call    0 returned 1
        1:  162:        printf("cardEffect () function fails: %d\n", cEFunctionFailed);
call    0 returned 1
        1:  163:        printf("Hand count fails: %d\n", handCountFailed);
call    0 returned 1
        1:  164:        printf("Deck total fails: %d\n", discardCardFails);
call    0 returned 1
        1:  165:        printf("Buy fails: %d\n", buyFails);
call    0 returned 1
        1:  166:        printf("Players hand count do not match fails: %d\n", playersHandNotMatch);
call    0 returned 1
        -:  167:    }
        -:  168:
        1:  169:    return 0;
        -:  170:
        -:  171:}
